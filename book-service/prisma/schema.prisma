generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  name     String
  password String
  role     UserRole @default(CUSTOMER)
  isActive Boolean  @default(true)

  isEmailVerified          Boolean   @default(false)
  emailVerificationToken   String?
  emailVerificationExpires DateTime?

  passwordResetToken   String?
  passwordResetExpires DateTime?

  refreshToken String?

  lastLoginAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  isDeleted   Boolean   @default(false)

  checkouts Checkout[]

  @@index([email])
  @@index([createdAt(sort: Desc)])
  @@index([isDeleted, isActive])
  @@index([emailVerificationToken])
  @@index([passwordResetToken])
  @@map("users")
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  E_WALLET
  CASH
}

model Book {
  id          Int      @id @default(autoincrement())
  title       String
  author      String
  isbn        String?  @unique
  description String?  @db.Text
  price       Decimal  @db.Decimal(10, 2)
  stock       Int      @default(0)
  soldCount   Int      @default(0)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  isDeleted   Boolean  @default(false)

  checkoutItems CheckoutItem[]

  @@index([title])
  @@index([author])
  @@index([isbn])
  @@index([isDeleted])
  @@index([createdAt(sort: Desc)])
  @@map("books")
}

model Checkout {
  id                      Int           @id @default(autoincrement())
  userId                  Int
  referenceNumber         String?       @unique
  paymentReferenceNumber  String?       @unique
  totalAmount             Decimal       @db.Decimal(10, 2)
  paymentStatus           PaymentStatus @default(PENDING)
  paymentMethod           PaymentMethod?

  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt

  user                    User          @relation(fields: [userId], references: [id])
  items                   CheckoutItem[]

  @@index([userId])
  @@index([paymentStatus])
  @@index([paymentMethod])
  @@index([referenceNumber])
  @@index([paymentReferenceNumber])
  @@index([createdAt(sort: Desc)])
  @@map("checkouts")
}

model CheckoutItem {
  id         Int     @id @default(autoincrement())
  checkoutId Int
  bookId     Int
  quantity   Int
  price      Decimal @db.Decimal(10, 2)
  subtotal   Decimal @db.Decimal(10, 2)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  checkout   Checkout @relation(fields: [checkoutId], references: [id], onDelete: Cascade)
  book       Book     @relation(fields: [bookId], references: [id])

  @@index([checkoutId])
  @@index([bookId])
  @@map("checkout_items")
}
